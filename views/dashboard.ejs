<%- include('layouts/header.ejs') %>

    <h2 class="mb-4"> Hii <%= user.name %>
    </h2>

    <div class="row">
        <div class="col-md-3">
            <ul class="list-group">
                <% if(users.length> 0){
                    for( let i=0; i < users.length; i++){ %>
                        <li class="list-group-item list-group-item-dark cursor-pointer user-list"
                            data-id="<%= users[i]['_id'] %>">
                            <img src="<%= users[i]['image'] %>" alt="" width="50px" height="50px">
                            <%= users[i]['name'] %>

                                <% if(users[i].isOnline=='1' ){ %>
                                    <sup class="online-status" id="<%= users[i]['_id'] %>-status">Online</sup>
                                    <% }else{ %>
                                        <sup class="offline-status" id="<%= users[i]['_id'] %>-status">Offline</sup>
                                        <% } %>

                        </li>
                        <% } } %>
            </ul>
        </div>
        <div class="col-md-9">
            <h3 class="start-head">Click to start the chat</h3>
            <div class="chat-section">
                <div id="chat-container">

                </div>
                <form action="" id="chat-form">
                    <input type="text" name="message" placeholder="Type your message" id="message" class="border"
                        required>
                    <input type="submit" value="Send message" class="btn btn-primary">
                </form>
            </div>
        </div>
    </div>

    <script>
        const sender_id = '<%= user._id %>'
        let receiver_id;
        const socket = io('/user-namespace', {
            auth: {
                token: '<%= user._id %>'
            }
        });

        $j(document).ready(function () {
            $j('.user-list').on('click', function () {
                const userId = $j(this).attr('data-id');
                receiver_id = userId;
                $j('.start-head').hide();
                $j('.chat-section').show();

                socket.emit('existingChat', { sender_id: sender_id, receiver_id: receiver_id });
            });

        })

        //update user online status
        socket.on('getOnlineUser', (data) => {
            $j('#' + data.user_id + '-status').text('Online');
            $j('#' + data.user_id + '-status').removeClass('offline-status');
            $j('#' + data.user_id + '-status').addClass('online-status');
        });

        //update user offline status
        socket.on('getOfflineUser', (data) => {
            $j('#' + data.user_id + '-status').text('Offline');
            $j('#' + data.user_id + '-status').removeClass('online-status');
            $j('#' + data.user_id + '-status').addClass('offline-status');
        });

        //save user chat
        $j('#chat-form').submit((event) => {
            event.preventDefault();

            var message = $('#message').val();
            $j.ajax({
                url: '/save-chat',
                type: 'POST',
                data: { sender_id: sender_id, receiver_id: receiver_id, message: message },
                success: (response) => {
                    if (response.success) {
                        $j('#message').val('');
                        const chat = response.data.message;
                        const html = `<div class="current-user-chat"><h5>${chat}</h5></div>`;
                        $j('#chat-container').append(html);
                        socket.emit('newChat', response.data);
                    } else {
                        alert(response.data.msg)
                    }
                }
            });
        });

        socket.on('loadNewChat', (data) => {
            if (sender_id == data.receiver_id && receiver_id == data.sender_id) {
                const html = `<div class="distance-user-chat"><h5>${data.message}</h5></div>`;
                $j('#chat-container').append(html);
            }
        });

        //load old chats
        socket.on('loadChats', (data) => {
            $j('#chat-container').html('');

            var chats = data.chats;
            let html = '';
            for (let x = 0; x < chats.length; x++) {
                let addClass = '';

                if (chats[x]['sender_id'] == sender_id) {
                    addClass = 'current-user-chat'
                } else {
                    addClass = 'distance-user-chat'
                }
                html += `
                <div class=${addClass}><h5>${chats[x]['message']}</h5></div>
                `
            }
            $j('#chat-container').append(html);
        })

    </script>

    <%- include('layouts/footer.ejs') %>